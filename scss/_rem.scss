@function r($values...) {
  @return rem($values...);
}
@function rem($values...) {
  @if not $output_rem {
    @return clean_values($values...);
  }
  
  $base_font_size: 16px !default;
  
  $all_rem: ();
  $separator: list-separator($values);
  @each $value in $values {
    $rem: ();
    @if type-of($value) == list {
      // List: process each value on its own
      $rem: append($rem, rem($value...), $separator);
    } @else if is_zero($value) {
      // Zero: enforce no units
      $rem: append($rem, 0, $separator);
    } @else if is_convertible($value) {
      // Pixel-like units: calculate rem value from $base_font_size
      $base_font_value: strip_units($base_font_size);
      $rem_value: strip_units($value / $base_font_value);
      $rem: append($rem, #{$rem_value}rem, $separator);
    } @else {
      // Unitless and non-pixel units: pass through unmodified
      $rem: append($rem, $value, $separator);
    }
    $all_rem: append($all_rem, $rem, $separator);
  }
  @return $all_rem;
}


@function rr($values...) {
  @return rem_round($values...);
}
@function rem_round($values...) {
  $round: round_px($values...);
  @return rem($round...);
}


@mixin r($values...) {
  @include rem($values...);
}
@mixin rem($property, $values...) {
  @if type-of($property) == map {
    @each $key in map-keys($property) {
      @include rem($key, map-get($property, $key)...);
    }
  } @else {
    $output_px: true !default;
    $output_rem: true !default;
    $base_font_size: 16px !default;
    $non_rounding_properties: 'font-size', 'letter-spacing', 'word-spacing';
    
    $all_px: clean_values($values...);
    @if not index($non_rounding_properties, $property) {
      $all_px: round_px($all_px...);
    }
    $all_rem: rem($all_px...);
    
    @if
      $output_px and not $output_rem
      or (
        $output_px and $output_rem
        and $all_px != $all_rem
      )
    {
      #{$property}: $all_px;
    }
    @if $output_rem or not $output_px {
      #{$property}: $all_rem;
    }
  }
}


@mixin rr($values...) {
  @include rem_round($values...);
}
@mixin rem_round($values...) {
  $round: round_px($values...);
  @include rem($round...);
}


@function strip_units($num) {
  @return $num / (($num * 0) + 1);
}
@function is_zero($value) {
  @return
    type-of($value) == number
    and strip_units($value) == 0;
}
@function is_convertible($value) {
  $px_units: 'px', 'pt';
  @return
    type-of($value) == number
    and not unitless($value)
    and index($px_units, unit($value));
}
@function round_px($values...) {
  $all_round: ();
  $separator: list-separator($values);
  @each $value in $values {
    $round: ();
    @if type-of($value) == list {
      // List: process each value on its own
      $round: append($round, round_px($value...), $separator);
    } @else if is_convertible($value) {
      // Pixel-like units: round
      $round: append($round, round($value), $separator);
    } @else {
      // Unitless and non-pixel units: pass through unmodified
      $round: append($round, $value, $separator);
    }
    $all_round: append($all_round, $round, $separator);
  }
  @return $all_round;
}
@function clean_values($values...) {
  $all_clean: ();
  $separator: list-separator($values);
  @each $value in $values {
    $clean: ();
    @if type-of($value) == list {
      // List: process each value on its own
      $clean: append($clean, clean_values($value...), $separator);
    } @else if is_zero($value) {
      // Zero: enforce no units
      $clean: append($clean, 0, $separator);
    } @else if is_convertible($value) and unit($value) != 'px' {
      // Pixel-like units: enforce px
      $clean: append($clean, strip_units($value) * 1px, $separator);
    } @else {
      // Unitless and pixel units: pass through unmodified
      $clean: append($clean, $value, $separator);
    }
    $all_clean: append($all_clean, $clean, $separator);
  }
  @return $all_clean;
}
