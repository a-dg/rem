$output_px: true !default;
$output_rem: true !default;
$unitless_mode: false !default;
$global_font_size: 16px !default;

@function r($values...) {
  @return rem($values...);
}
@function rem($values...) {
  @if not $output_rem {
    @return clean_values($values...);
  }
  
  $all_rem: ();
  $separator: list_separator($values);
  @each $value in $values {
    $rem: null;
    @if type_of($value) == list {
      // List: process each value on its own
      $rem: rem($value...);
    } @else if is_zero($value) {
      // Zero: enforce no units
      $rem: 0;
    } @else if is_convertible($value) {
      // Pixel-like units: calculate rem value from $global_font_size
      $global_font_size_px: percent_to_px($global_font_size);
      $global_font_value: strip_units($global_font_size_px);
      $rem: (strip_units($value / $global_font_value) * 1rem);
    } @else {
      // Unitless and non-pixel units: pass through unmodified
      $rem: $value;
    }
    $all_rem: append($all_rem, $rem, $separator);
  }
  @return $all_rem;
}


@function rr($values...) {
  @return rem_round($values...);
}
@function rem_round($values...) {
  $round: round_px($values...);
  @return rem($round...);
}


@mixin r($values...) {
  @include rem($values...);
}
@mixin rem($property, $values...) {
  @if type_of($property) == map {
    @each $key in map_keys($property) {
      @include rem($key, map_get($property, $key)...);
    }
  } @else {
    $all_px: null;
    $all_rem: null;
    
    @if $unitless_mode and is_inherently_unitless($property, $values...) {
      $all_px: $values;
      $all_rem: $values;
    } @else {
      $all_px: clean_values($values...);
      @if is_roundable($property) {
        $all_px: round_px($all_px...);
      }
      $all_rem: rem($all_px...);
    }
    
    @if ($output_px and not $output_rem)
      or ($output_px and $output_rem and $all_px != $all_rem)
    {
      #{$property}: $all_px;
    }
    @if $output_rem or not $output_px {
      #{$property}: $all_rem;
    }
  }
}


@mixin rr($values...) {
  @include rem_round($values...);
}
@mixin rem_round($values...) {
  $round: round_px($values...);
  @include rem($round...);
}


@function strip_units($num) {
  @return ($num / (($num * 0) + 1));
}
@function is_zero($value) {
  @return
    type_of($value) == number
    and strip_units($value) == 0;
}
@function is_convertible($value) {
  $px_units: 'px', 'pt';
  @if $unitless_mode {
    @return
      type_of($value) == number
      and (
        unitless($value)
        or (
          not unitless($value)
          and index($px_units, unit($value))
        )
      );
  }
  @return
    type_of($value) == number
    and not unitless($value)
    and index($px_units, unit($value));
}
@function is_roundable($property) {
  $non_rounding_properties: font-size, letter-spacing, word-spacing;
  @return not index($non_rounding_properties, $property)
}
@function is_inherently_unitless($property, $values...) {
  $non_convertible_properties:
    counter-increment,
    counter-reset,
    font-weight,
    pitch-range,
    richness,
    stress,
    volume,
    z-index,
    zoom;
  
  // In unitless mode, line-height values greater than or equal to this variable
  // are assumed to be pixels instead of relative, and will be converted
  $line_height_assume_px_min: 6;
  
  @return
    index($non_convertible_properties, $property)
    or (
      $property == line-height
      and length($values) == 1
      and strip_units($values...) < $line_height_assume_px_min
    );
}
@function round_px($values...) {
  $all_round: ();
  $separator: list_separator($values);
  @each $value in $values {
    $round: null;
    @if type_of($value) == list {
      // List: process each value on its own
      $round: round_px($value...);
    } @else if is_convertible($value) {
      // Pixel-like units: round
      $round: round($value);
    } @else {
      // Unitless and non-pixel units: pass through unmodified
      $round: $value;
    }
    $all_round: append($all_round, $round, $separator);
  }
  @return $all_round;
}
@function clean_values($values...) {
  $all_clean: ();
  $separator: list_separator($values);
  @each $value in $values {
    $clean: null;
    @if type_of($value) == list {
      // List: process each value on its own
      $clean: clean_values($value...);
    } @else if is_zero($value) {
      // Zero: enforce no units
      $clean: 0;
    } @else if is_convertible($value) and unit($value) != 'px' {
      // Pixel-like units: enforce px
      $clean: (strip_units($value) * 1px);
    } @else {
      // Unitless and pixel units: pass through unmodified
      $clean: $value;
    }
    $all_clean: append($all_clean, $clean, $separator);
  }
  @return $all_clean;
}
@function percent_to_px($value) {
  @if unitless($value) {
    $value: ($value * 1px);
  }
  @if unit($value) != '%' {
    @return $value;
  }
  @return (strip_units($value / 100) * 16px);
}
