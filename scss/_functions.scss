@function r($original_values...) {
  @return rem($original_values...);
}
@function rem($original_values...) {
  @if not $output_rem {
    @return $original_values;
  }
  
  $all_rem_values: ();
  $base_font_size: 16px !default;
  @each $original_value in $original_values {
    $rem_values: ();
    @each $value in $original_value {
      @if is_zero($value) {
        // Zero: enforce no units
        $rem_values: append($rem_values, 0);
      } @else if is_convertible($value) {
        // Pixel-like units: calculate rem value from $base_font_size
        $base_font_value: strip_units($base_font_size);
        $rem_value: strip_units($value / $base_font_value);
        $rem_values: append($rem_values, #{$rem_value}rem);
      } @else {
        // Unitless and non-pixel units: pass through unmodified
        $rem_values: append($rem_values, $value);
      }
    }
    $all_rem_values: append($all_rem_values, $rem_values, comma);
  }
  @return $all_rem_values;
}


@function rr($original_values...) {
  @return rem_round($original_values...);
}
@function rem_round($original_values...) {
  $all_round_values: ();
  @for $i from 1 through length($original_values) {
    $round_values: ();
    $values: nth($original_values, $i);
    @each $value in $values {
      @if is_convertible($value) {
        // Pixel-like units: round
        $round_value: round($value);
        $round_values: append($round_values, $round_value);
      } @else {
        // Unitless and non-pixel units: pass through unmodified
        $round_values: append($round_values, $value);
      }
    }
    $all_round_values: append($all_round_values, $round_values, comma);
  }
  @return rem($all_round_values...);
}


@function strip_units($num) {
  @return $num / (($num * 0) + 1);
}
@function is_zero($value) {
  @return
    type-of($value) == number
    and strip_units($value) == 0;
}
@function is_convertible($value) {
  $px_units: 'px', 'pt';
  @return
    type-of($value) == number
    and not unitless($value)
    and index($px_units, unit($value));
}
