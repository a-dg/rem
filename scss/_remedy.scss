$output_px: true !default;
$output_rem: true !default;
$global_font_size: 16px !default;

@function r($values...) {
  @return remedy($values...);
}
@function remedy($values...) {
  @if not $output_rem {
    @return r_clean_values($values...);
  }
  
  $all_rem: ();
  $separator: list_separator($values);
  @each $value in $values {
    $rem: null;
    @if type_of($value) == list {
      // List: process each value on its own
      $rem: remedy($value...);
    } @else if r_is_zero($value) {
      // Zero: enforce no units
      $rem: 0;
    } @else if r_is_convertible($value) {
      // Pixel-like units: calculate rem value from $global_font_size
      $global_font_size_px: r_percent_to_px($global_font_size);
      $global_font_value: r_strip_units($global_font_size_px);
      $rem: (r_strip_units($value / $global_font_value) * 1rem);
    } @else {
      // Unitless and non-pixel units: pass through unmodified
      $rem: $value;
    }
    $all_rem: append($all_rem, $rem, $separator);
  }
  @return $all_rem;
}


@function rr($values...) {
  @return remedy_round($values...);
}
@function remedy_round($values...) {
  $round: r_round_px($values...);
  @return remedy($round...);
}


@mixin r($values...) {
  @include remedy($values...);
}
@mixin remedy($property, $values...) {
  @if type_of($property) == map {
    @each $key in map_keys($property) {
      @include remedy($key, map_get($property, $key)...);
    }
  } @else {
    $all_px: r_clean_values($values...);
    @if r_is_roundable($property) {
      $all_px: r_round_px($all_px...);
    }
    $all_rem: remedy($all_px...);
    
    @if ($output_px and not $output_rem)
      or ($output_px and $output_rem and $all_px != $all_rem)
    {
      #{$property}: $all_px;
    }
    @if $output_rem or not $output_px {
      #{$property}: $all_rem;
    }
  }
}


@mixin rr($values...) {
  @include remedy_round($values...);
}
@mixin remedy_round($values...) {
  $round: r_round_px($values...);
  @include remedy($round...);
}


@function r_strip_units($num) {
  @return ($num / (($num * 0) + 1));
}
@function r_is_zero($value) {
  @return
    type_of($value) == number
    and r_strip_units($value) == 0;
}
@function r_is_convertible($value) {
  $px_units: 'px', 'pt';
  @return
    type_of($value) == number
    and not unitless($value)
    and index($px_units, unit($value));
}
@function r_is_roundable($property) {
  $non_rounding_properties: font-size, letter-spacing, word-spacing;
  @return not index($non_rounding_properties, $property)
}
@function r_round_px($values...) {
  $all_round: ();
  $separator: list_separator($values);
  @each $value in $values {
    $round: null;
    @if type_of($value) == list {
      // List: process each value on its own
      $round: r_round_px($value...);
    } @else if r_is_convertible($value) {
      // Pixel-like units: round
      $round: round($value);
    } @else {
      // Unitless and non-pixel units: pass through unmodified
      $round: $value;
    }
    $all_round: append($all_round, $round, $separator);
  }
  @return $all_round;
}
@function r_clean_values($values...) {
  $all_clean: ();
  $separator: list_separator($values);
  @each $value in $values {
    $clean: null;
    @if type_of($value) == list {
      // List: process each value on its own
      $clean: r_clean_values($value...);
    } @else if r_is_zero($value) {
      // Zero: enforce no units
      $clean: 0;
    } @else if r_is_convertible($value) and unit($value) != 'px' {
      // Pixel-like units: enforce px
      $clean: (r_strip_units($value) * 1px);
    } @else {
      // Unitless and pixel units: pass through unmodified
      $clean: $value;
    }
    $all_clean: append($all_clean, $clean, $separator);
  }
  @return $all_clean;
}
@function r_percent_to_px($value) {
  @if unitless($value) {
    $value: ($value * 1px);
  }
  @if unit($value) != '%' {
    @return $value;
  }
  @return (r_strip_units($value / 100) * 16px);
}
